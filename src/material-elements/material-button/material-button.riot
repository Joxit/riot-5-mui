<material-button>
  <a if="{ props.href }" href="{ props.href }" target="{ props.target }">
    <material-waves if="{!attributeToBool(this.props.disabled)}" center="{ props.wavesCenter }" rounded="{ props.rounded }" opacity="{ props.wavesOpacity }" color="{ props.wavesColor }" duration="{ props.wavesDuration }" onWaveStart="{ onWaveStart }" onWaveEnd="{ onWaveEnd }">
    </material-waves>
    <div class="content">
      <slot />
    </div>
  </a>
  <button type="{ props.type }" if="{ !props.href }">
    <material-waves if="{!attributeToBool(props.disabled)}" center="{ props.wavesCenter }" rounded="{ props.rounded }" opacity="{ props.wavesOpacity }" color="{ props.wavesColor }" duration="{ props.wavesDuration }" onWaveStart="{ onWaveStart }" onWaveEnd="{ onWaveEnd }">
    </material-waves>
    <div class="content">
      <slot />
    </div>
  </button>

  <script>
    const SUPPORTED_ATTRIBUTES = ['disabled', 'rounded', 'icon', 'shadow', 'outlined', 'inverted'];
    import MaterialWaves from '../material-waves/material-waves.riot';
    import {
      attributeToBool,
      tryCall,
      attributesObj
    } from '../../mixins/utilities';
    export default {
      state: {
        attributes: {}
      },
      components: {
        MaterialWaves
      },
      onMounted(props, state) {
        // Attributes
        this.updateAttributes(props, state);
        this.root.firstElementChild.onclick = (e) => {
          tryCall(props.onClick, e)
        }
      },
      onUpdated(props, state) {
        this.updateAttributes(props, state);
      },
      updateAttributes(props, state) {
        SUPPORTED_ATTRIBUTES.forEach(attr => {
          if (attributeToBool(props[attr])) {
            this.root.firstElementChild.setAttribute(attr, true);
            state.attributes[attr] = true;
          } else {
            state.attributes[attr] = false;
          }
        })
        const textColor = state.attributes.inverted ? props.color : props.textColor;
        const color = state.attributes.inverted ? props.textColor : props.color;

        this.root.firstElementChild.style.background = color;
        this.root.firstElementChild.style.color = textColor;

        if (state.attributes.outlined) {
          this.root.firstElementChild.style['border-color'] = color;
          this.root.firstElementChild.style.color = textColor;
          this.root.firstElementChild.style.background = '';
        }
      },
      /**
       * When wave will be starting invoke appropriate event
       */
      onWaveStart(wave) {
        tryCall(this.props.onWaveStart, wave);
      },
      /**
       * When wave will end invoke appropriate event
       */
      onWaveEnd(wave) {
        tryCall(this.props.onWaveEnd, wave);
      },
      attributeToBool
    }
  </script>
</material-button>