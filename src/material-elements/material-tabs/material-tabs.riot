<material-tabs>
  <material-button
    each="{(tab, k) in props.tabs}"
    onClick="{(e) => this.onTabChanged(e, k)}"
    class="{state.selected == k ? 'selected' : ''}"
    waves-opacity="{props.wavesOpacity}"
    waves-duration="{props.wavesDuration}"
    waves-center="{props.wavesCenter}"
    waves-color="{props.wavesColor}"
    color="{state.selected != k || !props.inverted ? props.color : props.textSelectedColor}"
    text-color="{state.selected == k && !props.inverted ? props.textSelectedColor : props.textColor}"
    inverted="{props.inverted}"
  >
    <div class="text" title="{tab.title || tab}">{props.cut ? this.cut(tab.title || tab) : tab.title || tab}</div>
  </material-button>
  <div class="line-wrapper" if="{props.useLine}" inverted="{props.inverted}">
    <div class="line" ref="line"></div>
  </div>
  <script>
    const SUPPORTED_ATTRIBUTES = ['inverted'];
    import MaterialButton from '../material-button/material-button.riot';
    import { tryCall } from '../../mixins/utilities';
    export default {
      state: {
        selected: 0,
      },
      components: {
        MaterialButton,
      },
      onMounted(props, state) {
        const line = this.$('.line');
        this.$$('material-button').forEach((node) => {
          node.style.width = (100 / this.props.tabs.length).toFixed(2) + '%';
          if (line) {
            line.style.width = node.style.width;
          }
        });
        this.updateLineColor(props, state);
        this.setLinePosition();
      },
      onUpdated(props, state) {
        this.updateLineColor(props, state);
      },
      updateLineColor(props, state) {
        const lineSelectedColor = props.inverted ? props.lineColor : props.lineSelectedColor;
        const lineColor = props.inverted ? props.lineSelectedColor : props.lineColor;
        const line = this.$('.line');
        const lineWrapper = this.$('.line-wrapper');
        if (line && lineWrapper) {
          line.style.background = lineSelectedColor;
          lineWrapper.style.background = lineColor;
        }
      },
      onTabChanged(e, selected) {
        this.update({
          selected: selected,
        });
        this.setLinePosition();
        tryCall(this.props.onTabChanged, this.props.tabs[selected], selected);
      },
      setLinePosition() {
        const line = this.$('.line');
        if (line) {
          line.style.left = (100 / this.props.tabs.length).toFixed(2) * this.state.selected + '%';
        }
      },
      cut(title) {
        return title.length > props.cut ? title.substr(0, props.cut) + '...' : title;
      },
    };
  </script>
</material-tabs>
