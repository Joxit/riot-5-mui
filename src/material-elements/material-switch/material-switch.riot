<material-switch>
  <span class="material-switch-container" checked="{ state.checked }" onclick="{ onChange }">
    <span class="material-switch-thumb">
      <template if="{ !state.checked }"><slot name="thumb-icon"></slot></template>
      <template if="{ state.checked }"><slot name="thumb-selected-icon"></slot></template>
    </span>
    <span class="material-switch-track"></span>
  </span>
  <script>
    import { attributeToBool, tryCall } from '../../mixins/utilities';
    export default {
      onBeforeMount(props, state) {
        this.updateAttributes(props, state);
      },
      onMounted(props, state) {
        this.updateAttributes(props, state);
      },
      onBeforeUpdate(props, state) {
        this.updateAttributes(props, state);
      },
      updateAttributes(props, state) {
        state.checked = props.checked !== undefined ? props.checked : state.checked;
        if (props.size && typeof props.size === 'string') {
          this.root.style['font-size'] = props.size;
        }
        const track = this.$('span.material-switch-track');
        const thumb = this.$('span.material-switch-thumb');

        const trackColor = (state.checked ? props.trackSelectedColor : props.trackColor) || null;
        const thumbColor = (state.checked ? props.thumbSelectedColor : props.thumbColor) || null;
        const outlineColor = (state.checked ? props.outlineSelectedColor : props.outlineColor) || null;

        track && (track.style['background-color'] = trackColor);
        track && (track.style['border-color'] = outlineColor);
        thumb && (thumb.style['background-color'] = thumbColor);
      },
      onChange(event) {
        if (attributeToBool(this.props.disabled)) {
          return;
        }
        event.target.checked = !this.state.checked;
        tryCall(this.props.onChange, event);
        this.update({
          checked: this.checkedValue(),
        });
      },
      checkedValue() {
        const supportIntermediate = attributeToBool(this.props.intermediate);

        if (!supportIntermediate) {
          return !this.state.checked;
        }
        if (this.state.checked === true || !this.state.checked) {
          this.oldValue = this.state.checked;
          return 'intermediate';
        }
        return !this.oldValue;
      },
      attributeToBool,
    };
  </script>
</material-switch>
